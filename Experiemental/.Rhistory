answers = subset(answers, select=c("uniqueId", "answer"))
answers = dummy_cols(answers, select_columns = 'answer')
answers = answers %>%
dplyr::group_by(uniqueId) %>%
summarise_at(vars(answer_1:answer_12), sum) %>%
ungroup
answers_helper = dplyr::left_join(answers, df[c("uniqueId", "scenario")])
trustor_impress = answers_helper$answer_3 + answers_helper$answer_3a + answers_helper$answer_3b
trustor_impress = ifelse(trustor_impress==0, 0, 1)
mcnemar.test(table(trustor_impress,answers_helper$scenario))
as.numeric(round(prop.table(table(trustor_impress,answers_helper$scenario),2)[2,]*100))
as.numeric(round(prop.table(table(answers_helper$answer_5, answers_helper$scenario),2),2)[2,]*100,1)
mcnemar.test(table(answers_helper$answer_5,answers_helper$scenario))
# percentage of participants that mentioned higher-level principles (morality/ethics)
as.numeric(round(prop.table(table(answers_helper$answer_4, answers_helper$scenario),2),2)[2,]*100,1)
# H1: When bot Helpers share with human Beneficiaries, do they receive the same
#     trust-gain as humans who share with human Beneficiaries?
nobot = data$P4H_trust_gain[which(data$study==2 & data$is_player=="4(H)" & data$scenario=="no_bot")]
p1bot = data$P4H_trust_gain[which(data$study==2 & data$is_player=="4(H)" & data$scenario=="p1bot")]
test_res = t.test(nobot,
p1bot, alternative = "two.sided")
vals = c(nobot, p1bot)
keys = c(rep("nobot", length(nobot)),
rep("p1bot", length(p1bot)))
df = data.frame(vals, keys)
effsize = cohens_d(df, vals~keys, var.equal = FALSE)
cat(paste0("Hypothesis H1 \n",
"No Bot average: ",round(mean(nobot)), "%", "\n",
"P1 Bot average: ",round(mean(p1bot)), "%", "\n",
"test details: ", ttest_extract(test_res, effsize), "\n",
"Number of people: ", length(nobot) + length(p1bot)))
# H2: When bot Helpers do not share with human Beneficiaries, are they punished
#     to the same extent as humans in the same situation?
nobot = data$P3S1[which(data$study==2 & data$is_player=="3" & data$scenario=="no_bot")]
p1bot = data$P3S1[which(data$study==2 & data$is_player=="3" & data$scenario=="p1bot")]
test_res = t.test(nobot,
p1bot, alternative = "two.sided")
vals = c(nobot, p1bot)
keys = c(rep("nobot", length(nobot)),
rep("p1bot", length(p1bot)))
df = data.frame(vals, keys)
effsize = cohens_d(df, vals~keys, var.equal = FALSE)
cat(paste0("Hypothesis H2 \n",
"No Bot average: ",round(mean(nobot)*100), "%", "\n",
"P2 Bot average: ",round(mean(p1bot)*100), "%", "\n",
"test details: ",ttest_extract(test_res, effsize), "\n",
"Number of people: ", length(nobot) + length(p1bot)))
# H3: When people punish bot Helpers who do not share, do they receive the same
#     trust-gain as when they punish human Helpers who do not share?
nobot = data$P4P_trust_gain[which(data$study==2 & data$is_player=="4(P)" & data$scenario=="no_bot")]
p1bot = data$P4P_trust_gain[which(data$study==2 & data$is_player=="4(P)" & data$scenario=="p1bot")]
test_res = t.test(nobot,
p1bot, alternative = "two.sided")
vals = c(nobot, p1bot)
keys = c(rep("nobot", length(nobot)),
rep("p1bot", length(p1bot)))
df = data.frame(vals, keys)
effsize = cohens_d(df, vals~keys, var.equal = FALSE)
cat(paste0("Hypothesis H3 \n",
"No Bot average: ",round(mean(nobot)), "%", "\n",
"P1 Bot average: ",round(mean(p1bot)), "%", "\n",
"test details: ",ttest_extract(test_res, effsize), "\n",
"Number of people: ", length(nobot) + length(p1bot)))
# P1: When bot Punishers punish human Helpers who do not share, do they receive
#     the same trust-gain as humans who punish humans who do not share?
nobot = data$P4P_trust_gain[which(data$study==2 & data$is_player=="4(P)" & data$scenario=="no_bot")]
p3bot = data$P4P_trust_gain[which(data$study==2 & data$is_player=="4(P)" & data$scenario=="p3bot")]
test_res = t.test(nobot,
p3bot, alternative = "two.sided")
vals = c(nobot, p3bot)
keys = c(rep("nobot", length(nobot)),
rep("p3bot", length(p3bot)))
df = data.frame(vals, keys)
effsize = cohens_d(df, vals~keys, var.equal = FALSE)
cat(paste0("Hypothesis P1 \n",
"No Bot average: ",round(mean(nobot)), "%", "\n",
"P2 Bot average: ",round(mean(p3bot)), "%", "\n",
"test details: ",ttest_extract(test_res, effsize), "\n",
"Number of people: ", length(nobot) + length(p3bot)))
# qualitative analysis of Trustor justifications
code_vars = names(data)[grepl("P4Hfollowup_code\\d", names(data))]
df = data[which(data$study==2 & data$is_player=="4(H)"),c("uniqueId", code_vars, "scenario")]
df[code_vars] <- sapply(df[code_vars],as.character)
answers <- melt(setDT(subset(df, select=-c(scenario))), id.vars = c("uniqueId") , value.name = "answer", na.rm=T)
answers = subset(answers, select=c("uniqueId", "answer"))
answers = dummy_cols(answers, select_columns = 'answer')
answers = answers %>%
dplyr::group_by(uniqueId) %>%
summarise_at(vars(answer_1:answer_12), sum) %>%
ungroup
answers = dplyr::left_join(answers, df[c("uniqueId", "scenario")])
answers_p4 = answers
mcnemar.test(table(answers$answer_4,answers$scenario)[,1:2])
round(prop.table(table(answers$answer_4,answers$scenario)[,1:2], 2), 2)
round(prop.table(table(answers$answer_1,answers$scenario)[,1:2], 2), 2)
mcnemar.test(table(answers$answer_1,answers$scenario)[,1:2])
# Trust gains depend on perceived helping and punishing norms
# Study 3 Results
# Running the necessary regressions for constructing the tables (Tables 1 and 2)
# Helping main effect
model_cont_self_help <- lm(trust_gain ~ guess_norm_all,
data = data[which(data$is_player == "4(H)"  & data$study==3),])
# Helping with controls
model_cont_self_help_all <- lm(trust_gain ~ guess_norm_all  + guess_emp_all + factor(treatment)
+ factor(age_categories) + factor(race_categories)
+ factor(income_categories) + factor(edu_categories)
+ factor(gender_categories) + factor(region) + factor(norm_self),
data = data[which(data$is_player == "4(H)"  & data$study==3),])
main_eff_model = summary(model_cont_self_help)
main_effect = main_eff_model$coef["guess_norm_all", c("Estimate", "Pr(>|t|)")]
main_effect_ci = round(confint(model_cont_self_help)["guess_norm_all",], 3)
n_obs_main = dim(data[which(data$is_player == "4(H)" & data$study==3),])[1]
controls_eff_model = summary(model_cont_self_help_all)
effect_controls = controls_eff_model$coef["guess_norm_all", c("Estimate", "Pr(>|t|)")]
effect_controls_ci = round(confint(model_cont_self_help_all)["guess_norm_all",], 3)
n_obs_controls = dim(data[which(data$is_player == "4(H)"  & data$study==3),])[1]
Table1 =  paste0("Table 1 \n",
"-------------------", "\n",
"Main effect", "\n",
"Coefficient: ", round(main_effect["Estimate"],3), "\n",
"p-value: p ", pvalue_round(main_effect["Pr(>|t|)"]), "\n",
"95% CI: (", round(main_effect_ci["2.5 %"], 3), ", ", round(main_effect_ci["97.5 %"], 3), ") \n",
"N: ", n_obs_main, "\n",
"Adj. R squared: ", round(main_eff_model$adj.r.squared, 3) ,"\n",
"-------------------", "\n",
"With controls", "\n",
"Coefficient: ", round(effect_controls["Estimate"],3), "\n",
"p-value: p ", pvalue_round(effect_controls["Pr(>|t|)"]), "\n",
"95% CI: (", round(effect_controls_ci["2.5 %"], 3), ", ", round(effect_controls_ci["97.5 %"], 3), ") \n",
"N: ", n_obs_controls, "\n",
"Adj. R squared: ", round(controls_eff_model$adj.r.squared, 3)
)
# Punishing main effect
model_cont_self_punish <- lm(trust_gain ~ guess_norm_all,
data = data[which(data$is_player == "4(P)" & data$study==3),])
#### Punishment with controls
model_cont_self_punish_all <- lm(trust_gain ~ guess_norm_all + guess_emp_all  + factor(treatment)
+ factor(age_categories) + factor(race_categories)
+ factor(income_categories) + factor(edu_categories)
+ factor(gender_categories) + factor(region) + factor(norm_self),
data = data[which(data$is_player == "4(P)" & data$study==3),])
main_eff_model = summary(model_cont_self_punish)
main_effect = main_eff_model$coef["guess_norm_all", c("Estimate", "Pr(>|t|)")]
main_effect_ci = round(confint(model_cont_self_punish)["guess_norm_all",], 3)
n_obs_main = dim(data[which(data$is_player == "4(P)" & data$study==3),])[1]
controls_eff_model = summary(model_cont_self_help_all)
effect_controls = controls_eff_model$coef["guess_norm_all", c("Estimate", "Pr(>|t|)")]
effect_controls_ci = round(confint(model_cont_self_punish_all)["guess_norm_all",], 3)
n_obs_controls = dim(data[which(data$is_player == "4(P)"  & data$study==3),])[1]
Table2 =  paste0("Table 2 \n",
"-------------------", "\n",
"Main effect \n",
"Coefficient: ", round(main_effect["Estimate"],3), "\n",
"p-value: ", pvalue_round(main_effect["Pr(>|t|)"]), "\n",
"95% CI: (", round(main_effect_ci["2.5 %"], 3), ", ", round(main_effect_ci["97.5 %"], 3), ") \n",
"N: ", n_obs_main, "\n",
"Adj. R squared: ", round(main_eff_model$adj.r.squared, 3) ,"\n",
"-------------------", "\n",
"With controls", "\n",
"Coefficient: ", round(effect_controls["Estimate"],3), "\n",
"p-value: ", pvalue_round(effect_controls["Pr(>|t|)"]), "\n",
"95% CI: (", round(effect_controls_ci["2.5 %"], 3), ", ", round(effect_controls_ci["97.5 %"], 3), ") \n",
"N: ", n_obs_controls, "\n",
"Adj. R squared: ", round(controls_eff_model$adj.r.squared, 3)
)
cat(Table1)
cat(Table2)
# Figure 4:
order_lookup = create_helper_vars()[[1]]
keep_cols = create_helper_vars()[[2]]
colors = create_helper_vars()[[3]]
p4_s4 = create_stat_test(data, is_fig4 = TRUE, panel="a")
s4_df = p4_s4[[1]]
p4_s4 = boxjitter_creator(p4_s4[[1]], p4_s4[[2]],is_norm=TRUE, extra_stats = p4_s4[[3]])
p4_s5 = create_stat_test(data, is_fig4 = TRUE, panel="b")
s5_df = p4_s5[[1]]
p4_s5 = boxjitter_creator(p4_s5[[1]], p4_s5[[2]],is_norm=TRUE, extra_stats = p4_s5[[3]])
grid.arrange(p4_s4, p4_s5,
layout_matrix = rbind(c(1,NA),c(2,NA)),
top=textGrob("Figure 4",gp=gpar(fontsize=12,font=3)))
s4_ppl = s4_df %>%
group_by(with_norm, scenario) %>%
dplyr::summarise(n = length(value)) %>%
arrange(scenario)
s5_ppl = s5_df %>%
group_by(with_norm, scenario) %>%
dplyr::summarise(n = length(value)) %>%
arrange(scenario)
s4_ppl$panel = "a"
s5_ppl$panel = "b"
p = plyr::rbind.fill(s4_ppl,s5_ppl)
cat(
paste0(
"In panel (a) the number of participants is ",
p$n[which(p$scenario=="no_bot" & p$panel=="a")], ", ",
p$n[which(p$scenario=="p2bot" & p$panel=="a")], ", ",
p$n[which(p$scenario=="p1bot" & p$panel=="a")],
" corresponding to the plotted order of pairs of box plots. \n",
"In panel (b) the number of participants is ",
p$n[which(p$scenario=="no_bot" & p$panel=="b" & p$with_norm=="no")], ", ",
p$n[which(p$scenario=="no_bot" & p$panel=="b" & p$with_norm=="yes")], ", ",
p$n[which(p$scenario=="p2bot" & p$panel=="b" & p$with_norm=="no")], ", ",
p$n[which(p$scenario=="p2bot" & p$panel=="b" & p$with_norm=="yes")],   ", ",
p$n[which(p$scenario=="p1bot" & p$panel=="b" & p$with_norm=="no")] , " and ",
p$n[which(p$scenario=="p1bot" & p$panel=="b" & p$with_norm=="yes")] ," corresponding to the plotted order of pairs of box plots \n"
))
# Hypothesis and comparisons
hb4 = data[which(data$study==4 & data$info_true=="Yes"),c("uniqueId", "P4H_trust_gain", "scenario")]
hb2 = data[which(data$study==2),c("uniqueId", "P4H_trust_gain")]
colnames(hb4)[2] = "P4H_trust_gain_s4"
colnames(hb2)[2] = "P4H_trust_gain_s2"
hb = left_join(hb4, hb2)
test_res = t.test(hb$P4H_trust_gain_s4[which(hb$scenario=='p1bot')],
hb$P4H_trust_gain_s2[which(hb$scenario=='p1bot')], alternative = 'two.sided', paired = T)
s4 = hb$P4H_trust_gain_s4[which(hb$scenario=='p1bot')]
s2 = hb$P4H_trust_gain_s2[which(hb$scenario=='p1bot')]
vals = c(s4, s2)
keys = c(rep("s4", length(s4)),
rep("s2", length(s2)))
df = data.frame(vals, keys)
effsize = cohens_d(df, vals~keys, var.equal = FALSE)
cat(paste0("With norm manipulation: ",round(mean(hb$P4H_trust_gain_s4[which(hb$scenario=='p1bot')])), "%", "\n",
"Without norm manipulation: ",round(mean(hb$P4H_trust_gain_s2[which(hb$scenario=='p1bot')])), "%", "\n",
"test details: ",ttest_extract(test_res, effsize)))
# Manipulating norm-consensus of helping may boost trust-gain
# Study 5
with_norm = data$P4H_trust_gain[which(data$study==5 & data$is_player=="4(H)" & data$info_true =="Yes" & data$scenario=="p2bot" & data$with_norm==1)]
without_norm = data$P4H_trust_gain[which(data$study==5 & data$is_player=="4(H)" & data$scenario=="p2bot" & data$with_norm==0)]
test_res = t.test(with_norm,
without_norm, alternative = 'two.sided')
vals = c(with_norm, without_norm)
keys = c(rep("with_norm", length(with_norm)),
rep("without_norm", length(without_norm)))
df = data.frame(vals, keys)
effsize = cohens_d(df, vals~keys, var.equal = FALSE)
cat(paste0("Study 4: ",round(mean(with_norm)), "%", "\n",
"Study 2: ",round(mean(without_norm)), "%", "\n",
"test details: ",ttest_extract(test_res, effsize)))
# some qualitative data stats
p1 = sum(data$P1_followup_code1!="", na.rm=T)
p4 = sum(data$P4Hfollowup_codes1!="", na.rm=T)
n_responses = p1 + p4
# only 1 person was confused
sum(answers_helper$answer_8)
# percentage of people that appeared confused
perc_confused = ((sum(answers_helper$answer_9==1) + sum(answers_p4$answer_11==1))/n_responses)
###### Methods ######
# convert date to date object
s4 = data[which(data$study==4), c("uniqueId", "date")]
s2 = data[which(data$study==2), c("uniqueId", "date")]
# number of days passed between Study 2 and Study 4
colnames(s4)[2] = "date_s4"
colnames(s2)[2] = "date_s2"
hb = left_join(s4, s2)
hb$days_passed = hb$date_s4 - hb$date_s2
avg_days = round(mean(hb$days_passed),1)
min_days = min(hb$days_passed)
cat(
paste0("Days passed between Study 2 and Study 4 \n",
"Average: ", avg_days, "\n",
"Minimum: ", min_days)
)
# manipulation belief in Study 5 vs Study 4
round(prop.table(table(data$info_true[which(data$study==4)])),2)
round(prop.table(table(data$info_true[which(data$study==5 & data$with_norm==1)])),2)
# Study 5 new participants who have never seen any version of the study
sum(data$uniqueId[which(data$study==5)] %in% data$uniqueId[which(data$study!=5)])
prevIds = unique(data$uniqueId[which(data$study!=5)])
s5 = data[which(data$study==5 & data$uniqueId %in% prevIds),c("uniqueId", "date")]
s14 = data[which((data$uniqueId %in% s5$uniqueId) & (data$study!=5)), c("uniqueId", "date", "study")]
colnames(s5)[2] = "date_s5"
colnames(s14)[2] = "date_s1_4"
hb = dplyr::right_join(s5,s14, by="uniqueId")
hb$days_passed = hb$date_s5 - hb$date_s1_4
avg_days = round(mean(hb$days_passed),1)
min_days = min(hb$days_passed)
cat(
paste0("Days passed between Study 2 and Study 4 \n",
"Average: ", avg_days, "\n",
"Minimum: ", min_days)
)
###### Recruitment ######
# breakdown of participants in each study
table(data$study)
# Study 4 returned
round(sum(data$study==4)/sum(data$study==2 & data$is_player=="4(H)")*100, 2)
# Study 5 returned
s5_returned = ifelse(data$uniqueId[which(data$study==5)] %in% data$uniqueId[which(data$study!=5)], 1, 0)
table(s5_returned)
##### Inclusion criteria and data quality #####
# Study 4 norm-consensus acceptance across treatments
round(prop.table(table(data$scenario[which(data$study==4)], data$info_true[which(data$study==4)]),1)*100)
belief = data$P4H_trust_gain[which(data$study==4 & data$info_true=="Yes" & data$scenario=="p2bot")]
non_belief = data$P4H_trust_gain[which(data$study==4 & data$info_true=="No" & data$scenario=="p2bot")]
test_res = t.test(belief,
non_belief)
vals = c(belief, non_belief)
keys = c(rep("belief", length(belief)),
rep("non_belief", length(non_belief)))
df = data.frame(vals, keys)
effsize = cohens_d(df, vals~keys, var.equal = FALSE)
cat(paste0(" \n",
"No Bot average: ",round(mean(belief)), "%", "\n",
"P2 Bot average: ",round(mean(non_belief)), "%", "\n",
"test details: ",ttest_extract(test_res, effsize)))
# Study 5 norm-consensus acceptance across treatments
round(prop.table(table(data$info_true[which(data$study==5 & data$with_norm==1)])),2)
round(prop.table(table(data$scenario[which(data$study==5 & data$with_norm==1)], data$info_true[which(data$study==5 & data$with_norm==1)]),1)*100)
###### Sample composition and compensation ######
data$gender = ifelse(data$gender=="Male", 1, 0)
data$non_Hispanic_White = ifelse(data$ethnics=="White", 1, 0)
data %>%
group_by(study) %>%
dplyr::summarize(avg_age = mean(age),
sd_age = sd(age),
gender = round(mean(gender)*100),
non_Hispanic_White = round(mean(non_Hispanic_White)*100))
# in Study 3, number of people with the same level of comprehension as in Study 2
sum(data$comprehension_num_correct[which(data$study==3)]>=6)
# Study 5 people who returned, saw the following studies
s5_ppl = data$uniqueId[which(data$study==5)]
others = data[which(data$study!=5), c("uniqueId", "study")]
returned = others[others$uniqueId %in% s5_ppl, ]
dim(returned)
table(returned$study) # 484 people in Study 2 includes people from study 4 as well
# time of completion & compensation
avg_time = data %>%
dplyr::group_by(study) %>%
dplyr::summarise(avg_mins = round(mean(duration)/60,1))
avg_time
avg_earn = data %>%
dplyr::group_by(study) %>%
dplyr::summarise(avg_earn = round(mean(earned, na.rm=T),2))
avg_time$earn = avg_earn$avg_earn
avg_time$avg_hourly = (60 * avg_time$earn)/avg_time$avg_mins
avg_time
###### Robustness checks ######
# Study 2
hb = subset(data, study==2)
# didn't answer all comprehension questions correctly
sum(hb$comprehension_num_correct!=8)
# failed manipulation check
table(hb$treatment_takeup)
# Study 3
hb = subset(data, study==3)
# didn't answer all comprehension questions correctly
sum(hb$comprehension_num_correct!=8)
# failed manipulation check
table(hb$treatment_takeup)
# Study 4
hb = subset(data, study==4)
hb2 = subset(data, study==2)
# failed manipulation check in either Study 2 or Study 4
table(hb$treatment_takeup)
hb = hb[c("uniqueId", "treatment_takeup")]
names(hb)[2] = "treatment_takeup_s4"
hb = dplyr::left_join(hb, hb2[c("uniqueId", "treatment_takeup")])
sum((hb$treatment_takeup_s4 + hb$treatment_takeup) < 2)
round((sum((hb$treatment_takeup_s4 + hb$treatment_takeup) < 2)/458)*100,2)
hb = subset(data, study==4)
table(hb$info_true)
round(prop.table(table(hb$info_true))*100, 2)
# Study 5
hb = subset(data, study==5)
# failed manipulation check
table(hb$treatment_takeup)
round((prop.table(table(hb$treatment_takeup)))*100,2)
# didn't believe the norm consensus manipulation
table(hb$info_true[which(hb$with_norm==1)])
round(prop.table(table(hb$info_true))*100, 2)
# Attrition rates
# reread the data to get partial responses as well
data = read.csv("HB_data.csv", stringsAsFactors = F)
# Study 2
round(prop.table(table(data$comprehension_passed[which(data$study==2)],
data$finished[which(data$study==2)]),1)*100, 2)
# Study 3
round(prop.table(table(data$comprehension_passed[which(data$study==3)],
data$finished[which(data$study==3)]),1)*100, 2)
# Study 4
round(prop.table(table(data$comprehension_passed[which(data$study==4)],
data$finished[which(data$study==4)]),1)*100, 2)
# Study 5
round(prop.table(table(data$comprehension_passed[which(data$study==5)],
data$finished[which(data$study==5)]),1)*100, 2)
View(data)
figure2(subset(data, study==1))
# Figure 3: no sample restrictions are applied
order_lookup = create_helper_vars()[[1]]
keep_cols = create_helper_vars()[[2]]
colors = create_helper_vars()[[3]]
p1 = create_stat_test(data, 2, "1", "1")
p1 = barplot_manual(p1[[1]], p1[[2]], player="1", keep_cols_name = "1")
p3 = create_stat_test(data, 2, "3", "3")
p3 = barplot_manual(p3[[1]], p3[[2]], player="3", keep_cols_name = "3", nudge = c(-0.45, -0.4))
p4h = create_stat_test(data, 2, "4(H)", "4(H)")
p4h = boxjitter_creator(p4h[[1]], p4h[[2]], is_trust=FALSE, player="4(H)",colors=colors[["4(H)"]])
p4p = create_stat_test(data, 2, "4(P)", "4(P)")
p4p = boxjitter_creator(p4p[[1]], p4p[[2]], is_trust=FALSE, player="4(P)",colors=colors[["4(P)"]])
p4h_trust = create_stat_test(data, 2, "4(H)", "4H_trust")
p4h_trust = boxjitter_creator(p4h_trust[[1]], p4h_trust[[2]], is_trust=TRUE, player="4H_trust",colors=colors[["4H_trust"]])
p4p_trust = create_stat_test(data, 2, "4(P)", "4P_trust")
p4p_trust = boxjitter_creator(p4p_trust[[1]], p4p_trust[[2]], is_trust=TRUE, player="4P_trust",colors=colors[["4P_trust"]])
grid.arrange(p1,p3,p4h,p4h_trust,p4p, p4p_trust,
layout_matrix = rbind(c(1,NA),c(2,NA), c(3,4), c(5,6)),
top=textGrob("Figure 3",gp=gpar(fontsize=12,font=3)))
p = subset(data, study==2, select=c("scenario", "is_player", "uniqueId")) %>%
dplyr::group_by(scenario, is_player) %>%
dplyr::summarise(n = length(uniqueId))
Table1 =  paste0("Table 1 \n",
"-------------------", "\n",
"Main effect", "\n",
"Coefficient: ", round(main_effect["Estimate"],3), "\n",
"p-value: p ", pvalue_round(main_effect["Pr(>|t|)"]), "\n",
"95% CI: (", round(main_effect_ci["2.5 %"], 3), ", ", round(main_effect_ci["97.5 %"], 3), ") \n",
"N: ", n_obs_main, "\n",
"Adj. R squared: ", round(main_eff_model$adj.r.squared, 3) ,"\n",
"-------------------", "\n",
"With controls", "\n",
"Coefficient: ", round(effect_controls["Estimate"],3), "\n",
"p-value: p ", pvalue_round(effect_controls["Pr(>|t|)"]), "\n",
"95% CI: (", round(effect_controls_ci["2.5 %"], 3), ", ", round(effect_controls_ci["97.5 %"], 3), ") \n",
"N: ", n_obs_controls, "\n",
"Adj. R squared: ", round(controls_eff_model$adj.r.squared, 3)
)
Table1
summarise(data,age)
mean(data.age)
mean(data$age)
sapply(data.age,mean)
sapply(age,mean)
describe(data)
mean(data.age)
mean(age,data=data)
mean(data[6])
mean(data$age)
data$age
boxplot(age,data=data)
mean(finished$age)
mean(data$age)
mean(data$duration)
mean(data$age)
std.error(data$age)
is.na(age)
is.na(data$age)
count(is.na(data$age))
sum(is.na(data$age))
agdata<-subset(data, is.na(data$age)=='FALSE')
count(isna(agdata$age))
count(is.na(agdata$age))
sum(is.na(agdata$age))
mean(agdata$age)
sd(agdata$age)
Table1
cat(Table1)
cat(Table2)
order_lookup = create_helper_vars()[[1]]
keep_cols = create_helper_vars()[[2]]
colors = create_helper_vars()[[3]]
p4_s4 = create_stat_test(data, is_fig4 = TRUE, panel="a")
s4_df = p4_s4[[1]]
p4_s4 = boxjitter_creator(p4_s4[[1]], p4_s4[[2]],is_norm=TRUE, extra_stats = p4_s4[[3]])
p4_s5 = create_stat_test(data, is_fig4 = TRUE, panel="b")
s5_df = p4_s5[[1]]
p4_s5 = boxjitter_creator(p4_s5[[1]], p4_s5[[2]],is_norm=TRUE, extra_stats = p4_s5[[3]])
grid.arrange(p4_s4, p4_s5,
layout_matrix = rbind(c(1,NA),c(2,NA)),
top=textGrob("Figure 4",gp=gpar(fontsize=12,font=3)))
s4_ppl = s4_df %>%
group_by(with_norm, scenario) %>%
dplyr::summarise(n = length(value)) %>%
arrange(scenario)
s5_ppl = s5_df %>%
group_by(with_norm, scenario) %>%
dplyr::summarise(n = length(value)) %>%
arrange(scenario)
s4_ppl$panel = "a"
s5_ppl$panel = "b"
p = plyr::rbind.fill(s4_ppl,s5_ppl)
cat(
paste0(
"In panel (a) the number of participants is ",
p$n[which(p$scenario=="no_bot" & p$panel=="a")], ", ",
p$n[which(p$scenario=="p2bot" & p$panel=="a")], ", ",
p$n[which(p$scenario=="p1bot" & p$panel=="a")],
" corresponding to the plotted order of pairs of box plots. \n",
"In panel (b) the number of participants is ",
p$n[which(p$scenario=="no_bot" & p$panel=="b" & p$with_norm=="no")], ", ",
p$n[which(p$scenario=="no_bot" & p$panel=="b" & p$with_norm=="yes")], ", ",
p$n[which(p$scenario=="p2bot" & p$panel=="b" & p$with_norm=="no")], ", ",
p$n[which(p$scenario=="p2bot" & p$panel=="b" & p$with_norm=="yes")],   ", ",
p$n[which(p$scenario=="p1bot" & p$panel=="b" & p$with_norm=="no")] , " and ",
p$n[which(p$scenario=="p1bot" & p$panel=="b" & p$with_norm=="yes")] ," corresponding to the plotted order of pairs of box plots \n"
))
# Hypothesis and comparisons
hb4 = data[which(data$study==4 & data$info_true=="Yes"),c("uniqueId", "P4H_trust_gain", "scenario")]
hb2 = data[which(data$study==2),c("uniqueId", "P4H_trust_gain")]
colnames(hb4)[2] = "P4H_trust_gain_s4"
colnames(hb2)[2] = "P4H_trust_gain_s2"
hb = left_join(hb4, hb2)
test_res = t.test(hb$P4H_trust_gain_s4[which(hb$scenario=='p1bot')],
hb$P4H_trust_gain_s2[which(hb$scenario=='p1bot')], alternative = 'two.sided', paired = T)
s4 = hb$P4H_trust_gain_s4[which(hb$scenario=='p1bot')]
s2 = hb$P4H_trust_gain_s2[which(hb$scenario=='p1bot')]
vals = c(s4, s2)
keys = c(rep("s4", length(s4)),
rep("s2", length(s2)))
df = data.frame(vals, keys)
effsize = cohens_d(df, vals~keys, var.equal = FALSE)
cat(paste0("With norm manipulation: ",round(mean(hb$P4H_trust_gain_s4[which(hb$scenario=='p1bot')])), "%", "\n",
"Without norm manipulation: ",round(mean(hb$P4H_trust_gain_s2[which(hb$scenario=='p1bot')])), "%", "\n",
"test details: ",ttest_extract(test_res, effsize)))
